name: "📦 .deb › Build"
run-name: "📦 .deb › Build"

on:
  workflow_dispatch:
    inputs:

      # ---------------------------------------------------------------------------------------
      #   ENABLE:   Will show all types of commits, including uncategorized
      #   DISABLE:  WIll only show actions that have been categorized using the format
      #                type(scope): description
      #                type: description
      # ---------------------------------------------------------------------------------------

      EDIT_CHANGELOG:
        description:  "🗂️ Dont Edit Changelog"
        required:     true
        default:      true
        type:         boolean

      # ---------------------------------------------------------------------------------------
      #   ENABLE:   Forces all packages to be re-created
      #   DISABLE:  packages will only be created if update to Opengist is available
      # ---------------------------------------------------------------------------------------

      FLAG_FORCE:
        description:  "🗂️ Force"
        required:     true
        default:      false
        type:         boolean

jobs:

    # ---------------------------------------------------------------------------------------
    #   JOB > INITIALIZE
    # ---------------------------------------------------------------------------------------

    job-build:
        name: >-
          📦 Build › Initialize
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write
        steps:

            # ---------------------------------------------------------------------------------------
            #   Job > Start
            # ---------------------------------------------------------------------------------------

            - name: "✅ Start"
              id: task_build_start
              run: |
                echo "Starting build"

            # ---------------------------------------------------------------------------------------
            #   Job > Checkout
            # ---------------------------------------------------------------------------------------

            - name: "☑️ Checkout"
              id: task_build_checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # ---------------------------------------------------------------------------------------
            #   Job > Get Previous Tag
            # ---------------------------------------------------------------------------------------

            - name: "Get Previous tag"
              id: previoustag
              uses: "WyriHaximus/github-action-get-previous-tag@v1"
              with:
                fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

            # ---------------------------------------------------------------------------------------
            #   Job > Print Current Version
            # ---------------------------------------------------------------------------------------

            - name: "🔨 Print Current Version"
              id: task_build_getver
              run: |
                echo -e ${{ steps.previoustag.outputs.tag }}

            # ---------------------------------------------------------------------------------------
            #   precheck
            # ---------------------------------------------------------------------------------------

            - name: "🔨 Install Packages"
              id: task_build_install
              run: |

                # #
                #   install packages
                # #

                sudo apt install tree
                sudo apt install lintian

            # ---------------------------------------------------------------------------------------
            #   precheck
            #
            #   checks the Opengist repo to see if a newer version of Opengist has been released.
            #   will then return whether an update is available or not and then exit.
            #
            #   @example    : ./update.sh -c 1.7.4 --precheck
            # ---------------------------------------------------------------------------------------

            - name: "🔨 Build › Precheck"
              id: task_build_precheck
              run: |

                # #
                #   base command
                # #

                command="update.sh --precheck"

                # #
                #   Get current version released from Github repo tags
                # #

                VER_RELEASED=$(echo "${{ steps.previoustag.outputs.tag }}" | sed 's/[v]*//g')

                # #
                #   If current tag exists, pass the latest tag version
                #   over to bash script
                # #

                if [[ ! -z "${VER_RELEASED}" ]]; then
                  command+=" --available ${VER_RELEASED}"
                else
                  echo -e "No version specified, skipping build"
                  exit 1
                fi

                # #
                #   permissions
                # #

                chmod +x "${GITHUB_WORKSPACE}/update.sh"

                # #
                #   save output of bash script to env var
                # #

                echo -e "Sending command: ${command}"
                eval "./$command"

            # ---------------------------------------------------------------------------------------
            #   Run update.sh bash script
            #
            #   gets the most current tag released and compares it to the latest version of
            #   opengist available.
            #
            #   if no update is available, script exists
            #
            #   bash script expects a version to be specified as an argument. This version is 
            #   what the latest release is from the Opengist repository. It is then compared to the
            #   latest released within this opengist-debian repo.
            #
            #   @example    : ./update.sh -c 1.7.4
            #                 ./update.sh -c 1.7.4 --precheck
            # ---------------------------------------------------------------------------------------

            - name: "🔨 Build › .deb"
              id: task_build_run
              if: steps.task_build_precheck.outcome == 'success'
              run: |

                # #
                #   base command
                # #

                command="update.sh"

                # #
                #   Input > skip changelog
                #   appends -s, --skipChangelog to the command
                #
                #   if you want to add your own changelog entry, you must open
                #   the update.sh bash file and edit the CHANGELOG multi-line var
                # #

                input_EDIT_CHANGELOG=${{ inputs.EDIT_CHANGELOG }}
                if [ "${input_EDIT_CHANGELOG}" = true ]; then
                  command+=" --skipChangelog"
                fi

                # #
                #   Input > Force
                #   appends -f, --force to the command
                # #

                if [ "${{ inputs.FLAG_FORCE }}" = true ]; then
                  command+=" --force"
                fi

                # #
                #   Get current version released from Github repo tags
                # #

                VER_RELEASED=$(echo "${{ steps.previoustag.outputs.tag }}" | sed 's/[v]*//g')

                # #
                #   If current tag exists, pass the latest tag version
                #   over to bash script
                # #

                if [[ ! -z "${VER_RELEASED}" ]]; then
                  command+=" --available ${VER_RELEASED}"
                else
                  echo -e "No version specified, skipping build"
                  exit 1
                fi

                # #
                #   permissions
                # #

                chmod +x "${GITHUB_WORKSPACE}/update.sh"

                # #
                #   save output of bash script to env var
                # #

                echo -e "Sending command: ${command}"
                echo "VERSION_PACKAGE<<EOF" >> $GITHUB_ENV
                echo "$(eval ./$command | tail -n1)" >> "$GITHUB_ENV"
                echo "EOF" >> $GITHUB_ENV

                # #
                #   old run command
                # #

                # eval "./$command"

            # ---------------------------------------------------------------------------------------
            #   Debug > Show Version
            # ---------------------------------------------------------------------------------------

            - name: "Debug: Package Version"
              shell: bash
              run: |
                echo -e "${{ env.VERSION_PACKAGE }}"
                echo -e "${{ steps.task_build_run.outputs.VERSION_PACKAGE }}"

            # ---------------------------------------------------------------------------------------
            #   Debug > Tree
            # ---------------------------------------------------------------------------------------

            - name: "Debug: Tree"
              shell: bash
              run: |
                tree

            # ---------------------------------------------------------------------------------------
            #   Upload artifacts > .deb packages
            # ---------------------------------------------------------------------------------------

            - name: >-
                📋 Upload Artifacts › opengist${{ env.VERSION_PACKAGE }}-linux-386.deb
              id: task_build_artifact_i386
              uses: actions/upload-artifact@v4
              if: always()
              with:
                name: "opengist${{ env.VERSION_PACKAGE }}-linux-386.deb"
                path: src/opengist${{ env.VERSION_PACKAGE }}-linux-386*.deb
                retention-days: 30

            - name: >-
                📋 Upload Artifacts › opengist${{ env.VERSION_PACKAGE }}-linux-amd64.deb
              id: task_build_artifact_amd64
              uses: actions/upload-artifact@v4
              if: always()
              with:
                name: "opengist${{ env.VERSION_PACKAGE }}-linux-amd64.deb"
                path: src/opengist${{ env.VERSION_PACKAGE }}-linux-amd64*.deb
                retention-days: 30

            - name: >-
                📋 Upload Artifacts › opengist${{ env.VERSION_PACKAGE }}-linux-arm64.deb
              id: task_build_artifact_arm64
              uses: actions/upload-artifact@v4
              if: always()
              with:
                name: "opengist${{ env.VERSION_PACKAGE }}-linux-arm64.deb"
                path: src/opengist${{ env.VERSION_PACKAGE }}-linux-arm64*.deb
                retention-days: 30

            # ---------------------------------------------------------------------------------------
            #   commit changes
            # ---------------------------------------------------------------------------------------

            - name: "📦 Commit"
              id: task_build_commit
              uses: stefanzweifel/git-auto-commit-action@v5

